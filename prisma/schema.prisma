// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  user_id String @id @default(uuid())
  email String @unique
  password String 
  refresh_token String?

  reviews Review[]
  bookings Booking[]
  accomodations Accommodation[]
  payment Payment[]
  role Role
  
  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt()
}


model Accommodation{
  accommodation_id String @id @default(uuid())
  description String
  price Float
  location String
  rating Float @default(0)

  userId String
  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  accommodationCategoryId String
  accommodationCategory AccommodationCategory @relation( fields: [accommodationCategoryId], references: [accommodationCategory_id], onDelete: Cascade)
  cityId String
  city City @relation(fields: [cityId], references: [city_id], onDelete: Cascade)
  reviews Review[]
  bookings Booking[]
  images Image[]

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model AccommodationCategory {
  accommodationCategory_id String @id @default(uuid())
  categoryName String @unique
  
  accommodation Accommodation[]

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model Review{
  review_id String @id @default(uuid())
  content String
  rating Float @default(0)

  userId String 
  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  accommodationId String
  accommodation Accommodation @relation(fields: [accommodationId], references: [accommodation_id], onDelete: Cascade)

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model Booking{
  booking_id String @id @default(uuid())
  totalCost String
  status BookingStatus
  checkInDate DateTime
  checkOutDate DateTime

  payment Payment?
  userId String 
  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  accommodationId String 
  accommodation Accommodation @relation(fields: [accommodationId], references: [accommodation_id], onDelete: Cascade)

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model Image{
  image_id String @id @default(uuid())
  photo_url String

  accommodationId String 
  accommodation Accommodation @relation(fields: [accommodationId], references: [accommodation_id], onDelete: Cascade)

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model Payment{
  payment_id String @id @default(uuid())
  amount Float

  userId String 
  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  bookingId String @unique
  booking Booking @relation(fields: [bookingId], references: [booking_id], onDelete: Cascade)
  paymentMethodId String
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [paymentMethod_id], onDelete: Cascade)

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model PaymentMethod{
  paymentMethod_id String @id @default(uuid())
  method String @unique

  payment Payment[]

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model City{
  city_id String @id @default(uuid())
  city_name String @unique

  accommodation Accommodation[]

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt
}
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Role {
  USER
  ADMIN
  HOST
}